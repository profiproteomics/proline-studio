/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.proline.studio.rsmexplorer;

import fr.proline.core.orm.msi.ProteinSet;
import fr.proline.studio.dam.tasks.SubTask;
import fr.proline.studio.gui.SplittedPanelContainer;
import fr.proline.studio.rsmexplorer.gui.ProteinGroupPeptideSpectrumPanel;
import fr.proline.studio.rsmexplorer.gui.ProteinGroupPeptideTablePanel;
import fr.proline.studio.rsmexplorer.gui.ProteinGroupProteinSetPanel;
import fr.proline.studio.rsmexplorer.gui.ProteinGroupTablePanel;
import java.util.HashMap;
import javax.swing.JPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//fr.proline.studio.rsmexplorer//View//EN",
autostore = false)
@TopComponent.Description(preferredID = "ViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "fr.proline.studio.rsmexplorer.ViewTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ViewAction",
preferredID = "ViewTopComponent")
@Messages({
    "CTL_ViewAction=View",
    "CTL_ViewTopComponent=View Window",
    "HINT_ViewTopComponent=This is a View window"
})
public final class ViewTopComponent extends TopComponent {

    private static HashMap<Class<?>, JPanel> panelMap = new HashMap<Class<?>, JPanel>();
    
    public ViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_ViewTopComponent());
        setToolTipText(Bundle.HINT_ViewTopComponent());

        add(createMainPanel());
    }

    public JPanel createMainPanel() {
        
        SplittedPanelContainer splittedPanel = new SplittedPanelContainer();
        
        JPanel p = new ProteinGroupTablePanel();
        p.setName("Protein Groups");
        splittedPanel.registerPanel(p);
        registerPanel(p);
        
        p = new ProteinGroupProteinSetPanel();
        p.setName("Proteins");
        splittedPanel.registerPanel(p);
        registerPanel(p);
        
        p = new ProteinGroupPeptideTablePanel();
        p.setName("Peptides");
        splittedPanel.registerPanel(p);
        registerPanel(p);
        
        p = new ProteinGroupPeptideSpectrumPanel();
        p.setName("Spectrum");
        splittedPanel.registerPanel(p);
        registerPanel(p);
        
        splittedPanel.createPanel();
        
        return splittedPanel;
    }
    
    public static JPanel getPanel(Class panelClass) {
        return panelMap.get(panelClass);
    }
    public static void registerPanel(JPanel panel) {
        panelMap.put(panel.getClass(), panel);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public void setSelectedResultSummary(Long taskId, ProteinSet[] proteinSets) {
        // Note : Protein Groups <=> Protein Sets

        ((ProteinGroupTablePanel)getPanel(ProteinGroupTablePanel.class)).setData(taskId, proteinSets);
        
    }
    
    public void dataUpdated(SubTask subTask) {
        ((ProteinGroupTablePanel)getPanel(ProteinGroupTablePanel.class)).dataUpdated(subTask);
    }
}
