package fr.proline.studio.rsmexplorer.gui;


import fr.proline.core.orm.msi.PeptideInstance;
import fr.proline.core.orm.msi.PeptideSet;
import fr.proline.core.orm.msi.ProteinMatch;
import fr.proline.core.orm.msi.ProteinSet;
import fr.proline.studio.dam.AccessDatabaseThread;
import fr.proline.studio.dam.tasks.AbstractDatabaseCallback;
import fr.proline.studio.dam.tasks.DatabaseLoadPeptidesInstancesTask;
import fr.proline.studio.rsmexplorer.DataViewerTopComponent;
import fr.proline.studio.rsmexplorer.gui.model.ProteinTableModel;
import fr.proline.studio.utils.DecoratedTable;
import javax.swing.event.ListSelectionEvent;


/**
 *
 * @author JM235353
 */
public class ProteinGroupProteinSetPanel extends javax.swing.JPanel {

    private Integer resultSummaryId = -1;

    /**
     * Creates new form ProteinGroupProteinSetPanel
     */
    public ProteinGroupProteinSetPanel() {
        initComponents();
        
        ((DecoratedTable)proteinsTable).displayColumnAsPercentage(ProteinTableModel.COLTYPE_PROTEIN_SCORE);
        
        //iniTable((JXTable)proteinsTable);
    }

 
    
    public void setData(ProteinSet proteinSet) {
        
        if (proteinSet == null) {
            clearData();
            return;
        }

        // keep resultSummaryId
        resultSummaryId = proteinSet.getResultSummary().getId();
        
        ProteinSet.TransientProteinSetData proteinSetData = proteinSet.getTransientProteinSetData();
        
        // retrieve sameset and subset
        ProteinMatch[] sameSetArray = proteinSetData.getSameSet(); 
        ProteinMatch[] subSetArray =  proteinSetData.getSubSet();
        
        // retrieve Typical Protein Match
        ProteinMatch typicalProtein = proteinSetData.getTypicalProteinMatch();
        
        // Modify Panel Border Title
        ((ProteinGroupProteinSelectedPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSelectedPanel.class)).updateTitle(typicalProtein.getAccession());
        
        // Modify protein description
        proteinNameTextField.setText(typicalProtein.getDescription() );
        
        
        // Modify Data in SameSet and SubSet Tables
        ((ProteinTableModel) proteinsTable.getModel()).setData(sameSetArray, subSetArray);
        
        // select the first row
        if ((sameSetArray != null) && (sameSetArray.length>0)) {
            proteinsTable.getSelectionModel().setSelectionInterval(0, 0);
        }
        
    }
    
    public void clearData() {
        proteinNameTextField.setText("");
        ((ProteinGroupProteinSelectedPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSelectedPanel.class)).updateTitle(null);
        ((ProteinTableModel) proteinsTable.getModel()).setData(null, null);
        
        resultSummaryId = -1;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proteinNameTextField = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        proteinsTable = new ProteinTable();

        proteinNameTextField.setText(org.openide.util.NbBundle.getMessage(ProteinGroupProteinSetPanel.class, "ProteinGroupProteinSetPanel.proteinNameTextField.text")); // NOI18N

        proteinsTable.setModel(new ProteinTableModel());
        scrollPane.setViewportView(proteinsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(proteinNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField proteinNameTextField;
    private javax.swing.JTable proteinsTable;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    
    
    private class ProteinTable extends DecoratedTable  {
        /** 
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */

        ProteinMatch proteinMatchSelected = null;
        
        @Override
        public void valueChanged(ListSelectionEvent e) {
            
            super.valueChanged(e);
            
 
            ProteinGroupPeptideTablePanel p = (ProteinGroupPeptideTablePanel) DataViewerTopComponent.getPanel(ProteinGroupPeptideTablePanel.class);
            
            
            // Retrieve Selected Row
            int selectedRow = getSelectedRow();
            

            // nothing selected
            if (selectedRow == -1) {
                proteinMatchSelected = null;
                p.setData(null);
                return;
                
            }
            
            // convert according to the sorting
            selectedRow = convertRowIndexToModel(selectedRow);
            
            
            
            // Retrived ProteinSet selected
            ProteinTableModel tableModel = (ProteinTableModel) getModel();
            final ProteinMatch proteinMatch= tableModel.getProteinMatch(selectedRow);
            
            if (proteinMatchSelected == proteinMatch) {
                return; // nothing to do
            }
            proteinMatchSelected = proteinMatch;
            
            
            
            // prepare callback to view new data
            AbstractDatabaseCallback callback = new AbstractDatabaseCallback() {

                @Override
                public boolean mustBeCalledInAWT() {
                    return true;
                }

                @Override
                public void run(boolean success) {
                    ProteinGroupPeptideTablePanel p = (ProteinGroupPeptideTablePanel) DataViewerTopComponent.getPanel(ProteinGroupPeptideTablePanel.class);

                    if (success) {
                        PeptideSet peptideSet = proteinMatch.getTransientPeptideSet();
                        PeptideInstance[] peptideInstances = peptideSet.getTransientPeptideInstances();
                    
                        p.setData(peptideInstances);
                    } else {
                        p.setData(null);
                    }
                }
            };
            
            // Load data if needed asynchronously
            AccessDatabaseThread.getAccessDatabaseThread().addTask(new DatabaseLoadPeptidesInstancesTask(callback, proteinMatch, resultSummaryId));

        }
    }


}
