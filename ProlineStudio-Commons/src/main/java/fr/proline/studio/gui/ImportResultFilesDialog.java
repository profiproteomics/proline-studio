/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.proline.studio.gui;

import com.google.common.base.Strings;
import fr.proline.core.om.model.msi.IResultFileProvider;
import fr.proline.studio.ImportResultFile;
import java.awt.GridBagConstraints;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.commons.lang3.StringUtils;
import org.openide.util.NbBundle;
import scala.collection.JavaConversions;

/**
 *
 * Dialog allowing user to specify Import Result File properties value.
 * 
 * @author VD225637
 */
public class ImportResultFilesDialog extends javax.swing.JDialog {

   
    private IResultFileProvider selectedResultFileProvider;
    private Map<String, JTextField> prop2Component = new HashMap<String, JTextField>();
    private Map<String, Object> propertiesValue = null; 

    /**
     * Creates new form ImportResultFilesDialog
     */
    public ImportResultFilesDialog(java.awt.Frame parent, boolean modal, IResultFileProvider rfProvider) {
        super(parent, modal);        
        initComponents();
        selectedResultFileProvider = rfProvider;
        initRFProviderPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paramMsgLabel = new javax.swing.JLabel();
        OKBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        resultFileProviderPanel = new javax.swing.JPanel();
        projectIdTF = new javax.swing.JTextField();
        projectIdLabel = new javax.swing.JLabel();
        instrumIdLabel = new javax.swing.JLabel();
        instrumIdTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertiesHelp = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        propertiesHelp1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        propertiesHelp2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.title")); // NOI18N

        paramMsgLabel.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.paramMsgLabel.text")); // NOI18N

        OKBtn.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.OKBtn.text")); // NOI18N
        OKBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.cancelBtn.text")); // NOI18N

        titleLabel.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.titleLabel.text")); // NOI18N

        resultFileProviderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultFileProviderPanel.setLayout(new java.awt.GridBagLayout());

        projectIdTF.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.projectIdTF.text")); // NOI18N

        projectIdLabel.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.projectIdLabel.text")); // NOI18N

        instrumIdLabel.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.instrumIdLabel.text")); // NOI18N

        instrumIdTF.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.instrumIdTF.text")); // NOI18N

        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        propertiesHelp.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        propertiesHelp.setColumns(20);
        propertiesHelp.setEditable(false);
        propertiesHelp.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        propertiesHelp.setForeground(new java.awt.Color(102, 102, 102));
        propertiesHelp.setLineWrap(true);
        propertiesHelp.setRows(5);
        propertiesHelp.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.propertiesHelp.text")); // NOI18N
        propertiesHelp.setWrapStyleWord(true);
        jScrollPane1.setViewportView(propertiesHelp);

        jScrollPane2.setBorder(null);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        propertiesHelp1.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        propertiesHelp1.setColumns(20);
        propertiesHelp1.setEditable(false);
        propertiesHelp1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        propertiesHelp1.setForeground(new java.awt.Color(102, 102, 102));
        propertiesHelp1.setLineWrap(true);
        propertiesHelp1.setRows(5);
        propertiesHelp1.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.propertiesHelp1.text")); // NOI18N
        propertiesHelp1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(propertiesHelp1);

        jScrollPane3.setBorder(null);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        propertiesHelp2.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        propertiesHelp2.setColumns(20);
        propertiesHelp2.setEditable(false);
        propertiesHelp2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        propertiesHelp2.setForeground(new java.awt.Color(102, 102, 102));
        propertiesHelp2.setLineWrap(true);
        propertiesHelp2.setRows(5);
        propertiesHelp2.setText(org.openide.util.NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.propertiesHelp2.text")); // NOI18N
        propertiesHelp2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(propertiesHelp2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(paramMsgLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addComponent(resultFileProviderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(315, 315, 315)
                                .addComponent(OKBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(instrumIdLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(instrumIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(projectIdLabel)
                                        .addGap(28, 28, 28)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(projectIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(projectIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(projectIdLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(instrumIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(instrumIdLabel))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(paramMsgLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultFileProviderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBtnActionPerformed
      propertiesValue = new HashMap<String, Object>();
      if(Strings.isNullOrEmpty(projectIdTF.getText()) || StringUtils.isNumeric(projectIdTF.getText()) ){
          JOptionPane.showMessageDialog(this, NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.error.title"), NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.require.err.msg", projectIdLabel.getText()),JOptionPane.ERROR_MESSAGE);
          return;
      }
      if(Strings.isNullOrEmpty(instrumIdTF.getText()) || StringUtils.isNumeric(instrumIdTF.getText()) ){
          JOptionPane.showMessageDialog(this, NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.error.title"), NbBundle.getMessage(ImportResultFilesDialog.class, "ImportResultFilesDialog.require.err.msg", instrumIdLabel.getText()),JOptionPane.ERROR_MESSAGE);
          return;
      }    
      
      Iterator<Entry<String, JTextField>> propUserEntryIt = prop2Component.entrySet().iterator();
      while(propUserEntryIt.hasNext()){
          Entry<String, JTextField> nextProp = propUserEntryIt.next();
          if(nextProp.getValue().getText() != null && !nextProp.getValue().getText().isEmpty())
            propertiesValue.put(nextProp.getKey(),nextProp.getValue().getText()); // TODO !!! Use ConvertUtil de apache common bean pour le passage au bon type !
      }
            
      propertiesValue.put(ImportResultFile.IMPORT_RF_PROJECT_ID, Integer.parseInt(projectIdTF.getText()));
      propertiesValue.put(ImportResultFile.IMPORT_RF_INSTRUMNET_ID, Integer.parseInt(instrumIdTF.getText()));           
    }//GEN-LAST:event_OKBtnActionPerformed

    public Map<String, Object> getResultFileProperties(){
        return propertiesValue;
    }
    
    /**
     * Initialize ResultFileProvider Panel
     */
    private void initRFProviderPanel(){    
        Map<String, Class<?>> rfProperties  = JavaConversions.mapAsJavaMap(selectedResultFileProvider.resultFileProperties());
        
        GridBagConstraints gbc = new GridBagConstraints();
        int row = 0; //Start row 0;
       
        Iterator<Entry<String, Class<?>>> rfPropIt = rfProperties.entrySet().iterator();
        while(rfPropIt.hasNext()) {
            Entry<String, Class<?>> e = rfPropIt.next();
            int col = 0; // first col in current row : Label
            gbc.gridx = col;
            gbc.gridy = row;
            gbc.insets = new java.awt.Insets(20, 20, 5, 5);
	    gbc.anchor = java.awt.GridBagConstraints.WEST;
	    gbc.gridwidth = 2;
	    gbc.fill = java.awt.GridBagConstraints.NONE;
            this.add(new JLabel(e.getKey()), gbc);
            
            col += 2;            
            gbc.gridx = col;
            gbc.insets = new java.awt.Insets(20, 5, 5, 20);
            gbc.anchor = java.awt.GridBagConstraints.EAST;
            gbc.gridwidth = 2;
            gbc.fill = java.awt.GridBagConstraints.NONE;
            JTextField c = new JTextField();
            this.add(c, gbc);
            prop2Component.put(e.getKey(),c);
            row++;
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportResultFilesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportResultFilesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportResultFilesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportResultFilesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ImportResultFilesDialog dialog = new ImportResultFilesDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel instrumIdLabel;
    private javax.swing.JTextField instrumIdTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel paramMsgLabel;
    private javax.swing.JLabel projectIdLabel;
    private javax.swing.JTextField projectIdTF;
    private javax.swing.JTextArea propertiesHelp;
    private javax.swing.JTextArea propertiesHelp1;
    private javax.swing.JTextArea propertiesHelp2;
    private javax.swing.JPanel resultFileProviderPanel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
