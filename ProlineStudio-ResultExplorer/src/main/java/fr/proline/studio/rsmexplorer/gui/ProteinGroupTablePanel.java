/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.proline.studio.rsmexplorer.gui;

import fr.proline.core.om.model.msi.Protein;
import fr.proline.core.om.model.msi.ProteinMatch;
import fr.proline.core.om.model.msi.ProteinSet;
import javax.swing.table.AbstractTableModel;
import org.jdesktop.swingx.JXTable;
import org.openide.explorer.view.OutlineView;
import org.openide.util.ImageUtilities;
import scala.Option;

/**
 *
 * @author JM235353
 */
public class ProteinGroupTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form ProteinGroupsTablePanel
     */
    public ProteinGroupTablePanel() {
        initComponents();
    }

    public void setData(ProteinSet[] proteinSets) {
        ((ProteinTableModel) proteinGroupTable.getModel()).setData(proteinSets);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proteinGroupScrollPane = new javax.swing.JScrollPane();
        proteinGroupTable = new JXTable();
        searchButton = new javax.swing.JButton();
        try {
            searchButton.setIcon(new javax.swing.ImageIcon(ImageUtilities.loadImage ("fr/proline/studio/images/search.png")));
        } catch (NullPointerException e) {
            // Hack : netbeans editor introspection does
            // not work when this panel is added to another component
        }
        searchTextField = new javax.swing.JTextField();

        proteinGroupScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        proteinGroupTable.setModel(new ProteinTableModel());
        proteinGroupTable.setMinimumSize(new java.awt.Dimension(120, 220));
        proteinGroupTable.setPreferredSize(new java.awt.Dimension(600, 220));
        proteinGroupScrollPane.setViewportView(proteinGroupTable);

        searchButton.setText(org.openide.util.NbBundle.getMessage(ProteinGroupTablePanel.class, "ProteinGroupTablePanel.searchButton.text")); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTextField.setText(org.openide.util.NbBundle.getMessage(ProteinGroupTablePanel.class, "ProteinGroupTablePanel.searchTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proteinGroupScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinGroupScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane proteinGroupScrollPane;
    private javax.swing.JTable proteinGroupTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables


    private static class ProteinTableModel extends AbstractTableModel {

        private static final int COLTYPE_PROTEIN_NAME  = 0;
        private static final int COLTYPE_PROTEIN_SCORE = 1;

        
        private static final String[] columnNames = { "Proteins Groups", "Score" };
        
        private ProteinSet[] proteinSets = null;
        
        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            if (proteinSets == null) {
                return 0;
            }
            return proteinSets.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            // Retrieve Protein Group
            ProteinSet proteinSet = proteinSets[row];
    
            switch (col) {
                case COLTYPE_PROTEIN_NAME:
                    Option<ProteinMatch> optionProteinMatch = proteinSet.typicalProteinMatch();
                    ProteinMatch proteinMatch = null;
                    if ((optionProteinMatch!=null) && (optionProteinMatch.isDefined())) {
                        proteinMatch = optionProteinMatch.get();
                    }
                    if (proteinMatch != null) {
                        return proteinMatch.accession();
                    } else {
                        return "";
                    }
                case COLTYPE_PROTEIN_SCORE:
                    return new Float(proteinSet.score()); //JPM.TODO get rid of the Float creation each time
            }
            return null; // should never happen
        }

        @Override
        public Class getColumnClass(int col) {
            switch (col) {
                case COLTYPE_PROTEIN_NAME:
                    return String.class;
                case COLTYPE_PROTEIN_SCORE:
                    return Float.class;
            }
            return null;
        }


        public void setData(ProteinSet[] proteinSets) {
            this.proteinSets = proteinSets;
            fireTableDataChanged();
        }

}
    


}
