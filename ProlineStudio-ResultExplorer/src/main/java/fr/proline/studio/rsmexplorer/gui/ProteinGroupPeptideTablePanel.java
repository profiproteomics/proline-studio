package fr.proline.studio.rsmexplorer.gui;

import fr.proline.core.orm.msi.Peptide;
import fr.proline.core.orm.msi.PeptideInstance;
import fr.proline.core.orm.msi.PeptideSet;
import fr.proline.core.orm.msi.ProteinMatch;
import fr.proline.studio.rsmexplorer.DataViewerTopComponent;
import fr.proline.studio.rsmexplorer.gui.model.PeptideTableModel;
import fr.proline.studio.utils.DecoratedTable;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author JM235353
 */
public class ProteinGroupPeptideTablePanel extends javax.swing.JPanel {

    ProteinMatch currentProteinMatch = null;
    
    /**
     * Creates new form ProteinGroupPeptideTablePanel
     */
    public ProteinGroupPeptideTablePanel() {
        initComponents();
        
        ((DecoratedTable)peptidesTable).displayColumnAsPercentage(PeptideTableModel.COLTYPE_PEPTIDE_SCORE);
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        peptidesTable = new PeptideTable();

        peptidesTable.setModel(new PeptideTableModel());
        scrollPane.setViewportView(peptidesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable peptidesTable;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables


    public void setData(ProteinMatch proteinMatch) {

        currentProteinMatch = proteinMatch;
        
        if (proteinMatch == null) {
            ((PeptideTableModel) peptidesTable.getModel()).setData(null);
        } else {
            PeptideSet peptideSet = proteinMatch.getTransientPeptideSet();
            PeptideInstance[] peptideInstances = peptideSet.getTransientPeptideInstances();

            ((PeptideTableModel) peptidesTable.getModel()).setData(peptideInstances);

            // select the first peptide
            if ((peptideInstances != null) && (peptideInstances.length > 0)) {
                peptidesTable.getSelectionModel().setSelectionInterval(0, 0);
            }
        }
        
    }
    
    
    private class PeptideTable extends DecoratedTable  {
        /** 
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */

        //ProteinSet proteinSetSelected = null;
        
        @Override
        public void valueChanged(ListSelectionEvent e) {
            
            super.valueChanged(e);
            
            ProteinGroupPeptideSpectrumPanel p = (ProteinGroupPeptideSpectrumPanel) DataViewerTopComponent.getPanel(ProteinGroupPeptideSpectrumPanel.class);

            int indexInModelSelected = peptidesTable.convertRowIndexToModel(peptidesTable.getSelectionModel().getMinSelectionIndex());
            
            p.setData(currentProteinMatch, indexInModelSelected, ((PeptideTableModel) peptidesTable.getModel()).getPeptideInstances());
        }
    }
    
    
}
