package fr.proline.studio.rsmexplorer.gui;

import fr.proline.core.orm.msi.PeptideInstance;
import fr.proline.studio.rsmexplorer.gui.model.PeptideTableModel;
import fr.proline.studio.rsmexplorer.gui.model.ProteinGroupTableModel;
import fr.proline.studio.utils.DecoratedTable;
import fr.proline.studio.utils.RelativePainterHighlighter;
import java.awt.Color;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.painter.MattePainter;
import org.jdesktop.swingx.util.PaintUtils;

/**
 *
 * @author JM235353
 */
public class ProteinGroupPeptideTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form ProteinGroupPeptideTablePanel
     */
    public ProteinGroupPeptideTablePanel() {
        initComponents();
        
        ((DecoratedTable)peptidesTable).displayColumnAsPercentage(PeptideTableModel.COLTYPE_PEPTIDE_SCORE);
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        peptidesTable = new PeptideTable();

        peptidesTable.setModel(new PeptideTableModel());
        scrollPane.setViewportView(peptidesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable peptidesTable;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables


    public void setData(PeptideInstance[] peptideInstances) {
        ((PeptideTableModel) peptidesTable.getModel()).setData(peptideInstances);
    }
    
    
    private class PeptideTable extends DecoratedTable  {
        /** 
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */

        //ProteinSet proteinSetSelected = null;
        
        @Override
        public void valueChanged(ListSelectionEvent e) {
            
            super.valueChanged(e);
            
            /*
            ProteinGroupProteinSetPanel p = (ProteinGroupProteinSetPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSetPanel.class);
            
            
            // Retrieve Selected Row
            int selectedRow = getSelectedRow();
            

            // nothing selected
            if (selectedRow == -1) {
                proteinSetSelected = null;
                p.setData(null);
                return;
                
            }
            
            // convert according to the sorting
            selectedRow = convertRowIndexToModel(selectedRow);
            
            
            
            // Retrived ProteinSet selected
            ProteinGroupTableModel tableModel = (ProteinGroupTableModel) getModel();
            final ProteinSet proteinSet = tableModel.getProteinSet(selectedRow);
            
            if (proteinSetSelected == proteinSet) {
                return; // nothing to do
            }
            proteinSetSelected = proteinSet;
            
            
            
            // prepare callback to view new data
            AbstractDatabaseCallback callback = new AbstractDatabaseCallback() {

                @Override
                public boolean mustBeCalledInAWT() {
                    return true;
                }

                @Override
                public void run(boolean success) {
                    ProteinGroupProteinSetPanel p = (ProteinGroupProteinSetPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSetPanel.class);

                    p.setData(proteinSet);
                }
            };
            
            // Load data if needed asynchronously
            AccessDatabaseThread.getAccessDatabaseThread().addTask(new DatabaseProteinsFromProteinSetTask(callback, proteinSet));
          */ //JPM.TODO
        }
    }
    
    
}
