package fr.proline.studio.rsmexplorer.gui.dialog;

import fr.proline.core.orm.util.DatabaseManager;
import fr.proline.repository.AbstractDatabaseConnector;
import fr.proline.repository.Database;
import fr.proline.repository.DatabaseConnectorFactory;
import fr.proline.repository.IDatabaseConnector;
import fr.proline.studio.dam.UDSConnectionManager;
import fr.proline.studio.utils.IconManager;
import java.util.HashMap;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.openide.util.NbPreferences;

/**
 *
 * @author JM235353
 */
public class DatabaseConnectionPanel extends javax.swing.JPanel {

    private static final String KEY_DRIVER_NAME = "driverNameDBServer";
    private static final String KEY_JDBC_URL    = "jdbcUrlDBServer";
    private static final String KEY_HOST = "hostDBServer";
    private static final String KEY_PORT = "portDBServer";
    private static final String KEY_DB_NAME = "databaseName";
    private static final String KEY_DB_USER = "databaseUserName";
    private static final String KEY_DB_PASSWORD = "databasePassword";

    private static final String[] PREDEFINED_DRIVERS_NAMES = { "PostgreSQL" };
    private static final String[] PREDEFINED_DRIVERS_CLASSES = { "org.postgresql.Driver" };
    private static final String[] PREDEFINED_JDBC_DRIVERS = { "jdbc:postgresql:" };
    
    
    private DatabaseConnectionDialog dialog = null;
    private DatabaseConnectionPanel thisReference;
    
    /**
     * Creates new form DatabaseConnectionPanel
     */
    public DatabaseConnectionPanel() {
        initComponents();
        thisReference = this;
        
        initDefaults();
    }

    public void setDialog(DatabaseConnectionDialog dialog) {
        this.dialog = dialog;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverParametersPanel = new javax.swing.JPanel();
        driverNameLabel = new javax.swing.JLabel();
        driverNameComboBox = new JComboBox(PREDEFINED_DRIVERS_NAMES);
        hostLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jdbcUrlLabel = new javax.swing.JLabel();
        jdbcUrlTextField = new javax.swing.JTextField();
        databaseParametersPanel = new javax.swing.JPanel();
        databaseLabel = new javax.swing.JLabel();
        databaseTextField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        rememberPasswordCheckBox = new javax.swing.JCheckBox();
        testConnectionButton = new javax.swing.JButton();

        serverParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.serverParametersPanel.border.title"))); // NOI18N

        driverNameLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.driverNameLabel.text")); // NOI18N

        driverNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverNameComboBoxActionPerformed(evt);
            }
        });

        hostLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.hostLabel.text")); // NOI18N

        hostTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.hostTextField.text")); // NOI18N

        portLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.portLabel.text")); // NOI18N

        portTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.portTextField.text")); // NOI18N

        jdbcUrlLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.jdbcUrlLabel.text")); // NOI18N

        jdbcUrlTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.jdbcUrlTextField.text")); // NOI18N

        javax.swing.GroupLayout serverParametersPanelLayout = new javax.swing.GroupLayout(serverParametersPanel);
        serverParametersPanel.setLayout(serverParametersPanelLayout);
        serverParametersPanelLayout.setHorizontalGroup(
            serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdbcUrlLabel)
                    .addComponent(hostLabel)
                    .addComponent(driverNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(driverNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(serverParametersPanelLayout.createSequentialGroup()
                        .addComponent(hostTextField)
                        .addGap(18, 18, 18)
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jdbcUrlTextField))
                .addContainerGap())
        );
        serverParametersPanelLayout.setVerticalGroup(
            serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverParametersPanelLayout.createSequentialGroup()
                .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driverNameLabel)
                    .addComponent(driverNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portLabel)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(hostLabel))
                .addGap(18, 18, 18)
                .addGroup(serverParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jdbcUrlLabel)
                    .addComponent(jdbcUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        databaseParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.databaseParametersPanel.border.title"))); // NOI18N

        databaseLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.databaseLabel.text")); // NOI18N

        databaseTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.databaseTextField.text")); // NOI18N

        userNameLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.userNameLabel.text")); // NOI18N

        userNameTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.userNameTextField.text")); // NOI18N

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.passwordLabel.text")); // NOI18N

        passwordField.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.passwordField.text")); // NOI18N

        rememberPasswordCheckBox.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.rememberPasswordCheckBox.text")); // NOI18N

        testConnectionButton.setText(org.openide.util.NbBundle.getMessage(DatabaseConnectionPanel.class, "DatabaseConnectionPanel.testConnectionButton.text")); // NOI18N
        testConnectionButton.setIcon(IconManager.getIcon(IconManager.IconType.QUESTION));
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databaseParametersPanelLayout = new javax.swing.GroupLayout(databaseParametersPanel);
        databaseParametersPanel.setLayout(databaseParametersPanelLayout);
        databaseParametersPanelLayout.setHorizontalGroup(
            databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseParametersPanelLayout.createSequentialGroup()
                .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databaseParametersPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel)
                            .addComponent(userNameLabel)
                            .addComponent(databaseLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(databaseParametersPanelLayout.createSequentialGroup()
                                .addComponent(rememberPasswordCheckBox)
                                .addGap(0, 242, Short.MAX_VALUE))
                            .addComponent(databaseTextField)
                            .addComponent(userNameTextField)
                            .addComponent(passwordField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseParametersPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(testConnectionButton)))
                .addContainerGap())
        );
        databaseParametersPanelLayout.setVerticalGroup(
            databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseParametersPanelLayout.createSequentialGroup()
                .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseLabel)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databaseParametersPanelLayout.createSequentialGroup()
                        .addComponent(rememberPasswordCheckBox)
                        .addContainerGap(31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseParametersPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(testConnectionButton))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(databaseParametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(serverParametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databaseParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void driverNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverNameComboBoxActionPerformed
        int driverIndex = driverNameComboBox.getSelectedIndex();
        jdbcUrlTextField.setText(PREDEFINED_JDBC_DRIVERS[driverIndex]);
    }//GEN-LAST:event_driverNameComboBoxActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        connect(false);
    }//GEN-LAST:event_testConnectionButtonActionPerformed

    public void connect(final boolean okButton) {
        
        dialog.setBusy(true);
        
        int driverSelected = driverNameComboBox.getSelectedIndex();
        
        String driverClass = PREDEFINED_DRIVERS_CLASSES[driverSelected];
        
        String jdbcURL = jdbcUrlTextField.getText();
        String host = hostTextField.getText();
        String port = portTextField.getText();
        String dbName = databaseTextField.getText();
        String userName = userNameTextField.getText();
        String password = new String(passwordField.getPassword());
        
        Runnable callback = new Runnable() {

            @Override
            public void run() {
                dialog.setBusy(false);
                
                UDSConnectionManager udsManager = UDSConnectionManager.getUDSConnectionManager();
                int step = udsManager.getConnectionStep();
                if (step == UDSConnectionManager.CONNECTION_FAILED) {
                    JOptionPane.showMessageDialog(thisReference, udsManager.getConnectionError(), "Database Connection Error", JOptionPane.ERROR_MESSAGE);
                } else if (step == UDSConnectionManager.CONNECTION_DONE) {
                    storeDefaults();
                    if (!okButton) {
                        JOptionPane.showMessageDialog(thisReference, "Database is Connected", "Information", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        
                        dialog.setVisible(false);
                    }
                    
                }
       
            }
            
        };
        
        
        UDSConnectionManager udsManager = UDSConnectionManager.getUDSConnectionManager();
        udsManager.tryToConnect(callback, jdbcURL, driverClass, dbName, host, port, userName, password);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JPanel databaseParametersPanel;
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JComboBox driverNameComboBox;
    private javax.swing.JLabel driverNameLabel;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JLabel jdbcUrlLabel;
    private javax.swing.JTextField jdbcUrlTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JCheckBox rememberPasswordCheckBox;
    private javax.swing.JPanel serverParametersPanel;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables

    protected final void initDefaults() {

        UDSConnectionManager udsConnectionManager = UDSConnectionManager.getUDSConnectionManager();

        String driverName = udsConnectionManager.getDriverName();
        if (!driverName.isEmpty()) {
            driverNameComboBox.setSelectedItem(driverName);
            String jdbcUrl = udsConnectionManager.getJdbcUrl();
            jdbcUrlTextField.setText(jdbcUrl);
        } else {
            driverNameComboBox.setSelectedItem(PREDEFINED_DRIVERS_NAMES[0]);
            int driverIndex = driverNameComboBox.getSelectedIndex();
            jdbcUrlTextField.setText(PREDEFINED_JDBC_DRIVERS[driverIndex]);
        }


        hostTextField.setText(udsConnectionManager.getHost());
        portTextField.setText(udsConnectionManager.getPort());
        
        
        databaseTextField.setText(udsConnectionManager.getDBName());
        userNameTextField.setText(udsConnectionManager.getUserName());
        String password = udsConnectionManager.getPassword();
        passwordField.setText(password);
        
        rememberPasswordCheckBox.setSelected(!password.isEmpty());
        
    }
    
    protected void storeDefaults() {
        UDSConnectionManager udsConnectionManager = UDSConnectionManager.getUDSConnectionManager();



        udsConnectionManager.setDriverName((String) driverNameComboBox.getSelectedItem());

        int driverSelected = driverNameComboBox.getSelectedIndex();
        String driverClass = PREDEFINED_DRIVERS_CLASSES[driverSelected];
        udsConnectionManager.setDriverClass(driverClass);

        udsConnectionManager.setJdbcUrl(jdbcUrlTextField.getText());

        udsConnectionManager.setHost(hostTextField.getText());

        udsConnectionManager.setPort(portTextField.getText());

        udsConnectionManager.setDBName(databaseTextField.getText());

        udsConnectionManager.setUserName(userNameTextField.getText());

        if (rememberPasswordCheckBox.isSelected()) {
            udsConnectionManager.setPassword(new String(passwordField.getPassword()));
        }
        
        udsConnectionManager.saveParameters();
    }

    protected boolean checkParametersHaveChanged() {


        UDSConnectionManager udsConnectionManager = UDSConnectionManager.getUDSConnectionManager();

        String driverName = udsConnectionManager.getDriverName();
        String driverNameCur = (String) driverNameComboBox.getSelectedItem();
        if (driverName.compareTo(driverNameCur) != 0) {
            return true;
        }

        String jdbcUrl = udsConnectionManager.getJdbcUrl();
        String jdbcUrlCur = jdbcUrlTextField.getText();
        if (jdbcUrl.compareTo(jdbcUrlCur) != 0) {
            return true;
        }

        String host = udsConnectionManager.getHost();
        String hostCur = hostTextField.getText();
        if (host.compareTo(hostCur) != 0) {
            return true;
        }

        String port = udsConnectionManager.getPort();
        String portCur = portTextField.getText();
        if (port.compareTo(portCur) != 0) {
            return true;
        }

        String dbName = udsConnectionManager.getDBName();
        String dbNameCur = databaseTextField.getText();
        if (dbName.compareTo(dbNameCur) != 0) {
            return true;
        }

        String userName = udsConnectionManager.getUserName();
        String userNameCur = userNameTextField.getText();
        if (userName.compareTo(userNameCur) != 0) {
            return true;
        }

        return false;



    }
    
}
