package fr.proline.studio.rsmexplorer.gui;


import fr.proline.core.orm.msi.ProteinSet;
import fr.proline.studio.dam.AccessDatabaseThread;
import fr.proline.studio.dam.tasks.AbstractDatabaseCallback;
import fr.proline.studio.dam.tasks.DatabaseProteinsFromProteinSetTask;
import fr.proline.studio.rsmexplorer.DataViewerTopComponent;
import fr.proline.studio.rsmexplorer.gui.model.ProteinGroupTableModel;
import fr.proline.studio.utils.RelativePainterHighlighter;
import fr.proline.studio.utils.RelativePainterHighlighter.NumberRelativizer;
import java.awt.Color;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.painter.MattePainter;
import org.jdesktop.swingx.util.PaintUtils;
import org.openide.util.ImageUtilities;

/**
 *
 * @author JM235353
 */
public class ProteinGroupTablePanel extends javax.swing.JPanel  {

    /**
     * Creates new form ProteinGroupsTablePanel
     */
    public ProteinGroupTablePanel() {
        initComponents();
        
        JXTable table = (JXTable) proteinGroupTable;
        
        // only one Protein Set can be selected
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        // allow user to hide/show columns
        table.setColumnControlVisible(true);
        
        // allow the user to search the table
        //table.setSearchable(null); //JPM.TODO
        
        // highlight one line of two
        table.addHighlighter(HighlighterFactory.createSimpleStriping()); 
        
        // Display of the Score Column as a percentage
        Color base = PaintUtils.setSaturation(Color.BLUE, .7f); 
        MattePainter matte = new MattePainter(PaintUtils.setAlpha(base, 125)); 
        RelativePainterHighlighter highlighter = new RelativePainterHighlighter(matte);
        highlighter.setRelativizer(new NumberRelativizer( ProteinGroupTableModel.COLTYPE_PROTEIN_SCORE, 0, 100) );
        highlighter.setHighlightPredicate( new HighlightPredicate.ColumnHighlightPredicate(ProteinGroupTableModel.COLTYPE_PROTEIN_SCORE) );
        table.addHighlighter(highlighter);
        

    }

    public void setData(ProteinSet[] proteinSets) {
        ((ProteinGroupTableModel) proteinGroupTable.getModel()).setData(proteinSets);
        
        // select the first row
        if ((proteinSets != null) && (proteinSets.length>0)) {
            proteinGroupTable.getSelectionModel().setSelectionInterval(0, 0);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proteinGroupScrollPane = new javax.swing.JScrollPane();
        proteinGroupTable = new ProteinGroupTable();
        searchButton = new javax.swing.JButton();
        try {
            searchButton.setIcon(new javax.swing.ImageIcon(ImageUtilities.loadImage ("fr/proline/studio/images/search.png")));
        } catch (NullPointerException e) {
            // Hack : netbeans editor introspection does
            // not work when this panel is added to another component
        }
        searchTextField = new javax.swing.JTextField();

        proteinGroupScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        proteinGroupTable.setModel(new ProteinGroupTableModel());
        proteinGroupTable.setMinimumSize(new java.awt.Dimension(120, 120));
        proteinGroupTable.setPreferredSize(new java.awt.Dimension(600, 120));
        proteinGroupScrollPane.setViewportView(proteinGroupTable);

        searchButton.setText(org.openide.util.NbBundle.getMessage(ProteinGroupTablePanel.class, "ProteinGroupTablePanel.searchButton.text")); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTextField.setText(org.openide.util.NbBundle.getMessage(ProteinGroupTablePanel.class, "ProteinGroupTablePanel.searchTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proteinGroupScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinGroupScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane proteinGroupScrollPane;
    private javax.swing.JTable proteinGroupTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    private class ProteinGroupTable extends JXTable  {
        /** 
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */

        ProteinSet proteinSetSelected = null;
        
        @Override
        public void valueChanged(ListSelectionEvent e) {
            
            super.valueChanged(e);
            
 
            ProteinGroupProteinSetPanel p = (ProteinGroupProteinSetPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSetPanel.class);
            
            
            // Retrieve Selected Row
            int selectedRow = getSelectedRow();
            

            // nothing selected
            if (selectedRow == -1) {
                proteinSetSelected = null;
                p.setData(null);
                return;
                
            }
            
            // convert according to the sorting
            selectedRow = convertRowIndexToModel(selectedRow);
            
            
            
            // Retrived ProteinSet selected
            ProteinGroupTableModel tableModel = (ProteinGroupTableModel) getModel();
            final ProteinSet proteinSet = tableModel.getProteinSet(selectedRow);
            
            if (proteinSetSelected == proteinSet) {
                return; // nothing to do
            }
            proteinSetSelected = proteinSet;
            
            
            
            // prepare callback to view new data
            AbstractDatabaseCallback callback = new AbstractDatabaseCallback() {

                @Override
                public boolean mustBeCalledInAWT() {
                    return true;
                }

                @Override
                public void run(boolean success) {
                    ProteinGroupProteinSetPanel p = (ProteinGroupProteinSetPanel) DataViewerTopComponent.getPanel(ProteinGroupProteinSetPanel.class);

                    p.setData(proteinSet);
                }
            };
            
            // Load data if needed asynchronously
            AccessDatabaseThread.getAccessDatabaseThread().addTask(new DatabaseProteinsFromProteinSetTask(callback, proteinSet));

        }
    }
    
   
    
}