/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.proline.studio.rsmexplorer.gui;


import fr.proline.core.orm.msi.MsQuery;
import fr.proline.core.orm.msi.PeptideMatch;
import fr.proline.core.orm.msi.Spectrum;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.DefaultXYDataset;
import org.slf4j.LoggerFactory;

import fr.proline.core.utils.lzma.package$EasyLzma$;
import fr.proline.studio.pattern.AbstractDataBox;
import fr.proline.studio.pattern.DataBoxPanelInterface;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.xy.AbstractXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author JM235353
 */
public class RsetPeptideSpectrumPanel extends javax.swing.JPanel implements DataBoxPanelInterface{

    private AbstractDataBox dataBox;
    
    private DefaultXYDataset dataSet;
    private JFreeChart chart;
    
    /**
     * Creates new form RsetPeptideSpectrumPanel
     */
    public RsetPeptideSpectrumPanel() {
        
        dataSet = new DefaultXYDataset();
        chart = ChartFactory.createXYLineChart("", "m/z", "intensity", dataSet, PlotOrientation.VERTICAL, true, true, false);
        
        chart.removeLegend();
        chart.setBackgroundPaint(Color.white);
        TextTitle textTitle = chart.getTitle();
        textTitle.setFont(textTitle.getFont().deriveFont(Font.PLAIN, 10.0f));

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.getRangeAxis().setUpperMargin(0.2);
        
        plot.setBackgroundPaint(Color.white);

        XYStickRenderer renderer = new XYStickRenderer();
        renderer.setBaseStroke(new BasicStroke(1.0f));
        plot.setRenderer(renderer);
        
        initComponents();
        
                /*       ((ChartPanel) spectrumPanel).addChartMouseListener(new ChartMouseListener() {

            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
                ChartEntity e = cme.getEntity();
     
                System.out.println(e.getClass());
                if (e != null && e instanceof XYItemEntity) {
                    XYItemEntity cyEnt = (XYItemEntity) e;
                    int sindex = cyEnt.getSeriesIndex();
                    int iindex = cyEnt.getItem();

                    System.out.println("x = " + dataSet.getXValue(sindex, iindex));
                    System.out.println("y = " + dataSet.getYValue(sindex, iindex));
                    ((ChartPanel) spectrumPanel).setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));
                } else if (e!=null) {
                    ((ChartPanel) spectrumPanel).setCursor(null);
                    //System.out.println(e.getArea());
                }

            }
        });*/
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spectrumPanel = new ChartPanel(chart, true);

        javax.swing.GroupLayout spectrumPanelLayout = new javax.swing.GroupLayout(spectrumPanel);
        spectrumPanel.setLayout(spectrumPanelLayout);
        spectrumPanelLayout.setHorizontalGroup(
            spectrumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        spectrumPanelLayout.setVerticalGroup(
            spectrumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spectrumPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spectrumPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel spectrumPanel;
    // End of variables declaration//GEN-END:variables

    
   public void setData(PeptideMatch peptideMatch) {

        constructSpectrumChart(peptideMatch);
        
    }
    
    private void constructSpectrumChart(PeptideMatch pm) {

        final String SERIES_NAME = "spectrumData";
        if (pm == null) {
            dataSet.removeSeries(SERIES_NAME);
            return;
        }

        MsQuery msQuery = pm.getTransientData().getIsMsQuerySet() ? pm.getMsQuery() : null;
        if (msQuery == null) {
            dataSet.removeSeries(SERIES_NAME);
            return;
        }
        
        Spectrum spectrum = msQuery.getTransientIsSpectrumSet() ? msQuery.getSpectrum() : null;
        if (spectrum == null) {
            dataSet.removeSeries(SERIES_NAME);
            return;
        }


        byte[] intensityByteArray = package$EasyLzma$.MODULE$.uncompress(spectrum.getIntensityList());
        byte[] massByteArray = package$EasyLzma$.MODULE$.uncompress(spectrum.getIntensityList());

        String intensityListString = new String(intensityByteArray);
        String massListString = new String(massByteArray);


        String[] intensitiyStringArray = intensityListString.split(" ");
        String[] massListStringArray = massListString.split(" ");

        int size = massListStringArray.length;
        if (size != intensitiyStringArray.length) {
            LoggerFactory.getLogger(RsmProteinAndPeptideSequencePanel.class).error("Intensity and Mass List have different size");
            return;
        }

        double[][] data = new double[2][size];
        for (int i = 0; i < size; i++) {
            data[0][i] = Double.parseDouble(massListStringArray[i]);
            data[1][i] = Double.parseDouble(intensitiyStringArray[i]);
        }

        dataSet.addSeries(SERIES_NAME, data);


        // Set title
        String title = "Query " + pm.getMsQuery().getId() + " - " + pm.getTransientData().getPeptide().getSequence();
        chart.setTitle(title);

        // reset X/Y zooming
        ((ChartPanel) spectrumPanel).restoreAutoBounds();
        ((ChartPanel) spectrumPanel).setBackground(Color.white);
    }
    
    @Override
    public void setDataBox(AbstractDataBox dataBox) {
        this.dataBox = dataBox;
    }
    
    public static class XYStickRenderer extends AbstractXYItemRenderer {

        @Override
        public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea,
                PlotRenderingInfo info, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis,
                XYDataset dataset, int series, int item, CrosshairState crosshairState, int pass) {

            double x = dataset.getXValue(series, item);
            double y = dataset.getYValue(series, item);
            if (!Double.isNaN(y)) {
                org.jfree.ui.RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
                org.jfree.ui.RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
                double transX = domainAxis.valueToJava2D(x, dataArea, xAxisLocation);
                double transOX = domainAxis.valueToJava2D(0, dataArea, xAxisLocation);
                double transY = rangeAxis.valueToJava2D(y, dataArea, yAxisLocation);
                double transOY = rangeAxis.valueToJava2D(0, dataArea, yAxisLocation);
                g2.setPaint(getItemPaint(series, item));
                g2.setStroke(getBaseStroke());
                PlotOrientation orientation = plot.getOrientation();
                if (orientation == PlotOrientation.VERTICAL) {
                    g2.drawLine((int) transX, (int) transOY, (int) transX, (int) transY);
                } else if (orientation == PlotOrientation.HORIZONTAL) {
                    g2.drawLine((int) transOY, (int) transX, (int) transY, (int) transX);
                }
                int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);
                int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);
                updateCrosshairValues(crosshairState, x, y, domainAxisIndex, rangeAxisIndex, transX, transY,
                        orientation);

            }
        }
    }
}
